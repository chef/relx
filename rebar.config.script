{match, [ErtsNumber]} = re:run(erlang:system_info(otp_release), "(\\d+)", [{capture, [0], list}]),
ErtsVsn = erlang:list_to_integer(ErtsNumber),
Opts1 = case lists:keysearch(erl_opts, 1, CONFIG) of
            {value, {erl_opts, Opts0}} ->
                Opts0;
            false ->
                []
        end,
Opts2 = if
            ErtsVsn >= 15 ->
                [{d, have_callback_support} | Opts1];	
             true ->
                Opts1
        end,
lists:keystore(erl_opts, 1, CONFIG, {erl_opts, Opts2}).




{ok, VSN} = application:get_key(rebar, vsn),
[VSN1 | _] = string:tokens(VSN, "-"),
[Maj, Min, Patch] = string:tokens(VSN1, "."),
IsRebar3 = (list_to_integer(Maj) >= 3),



Rebar2Deps = [
              {cf, ".*", {git, "https://github.com/project-fifo/cf", {tag, "0.1.2"}}},
              {rebar_vsn_plugin, ".*", {git, "https://github.com/erlware/rebar_vsn_plugin.git", {branch, "master"}}},
              {neotoma, ".*", {git, "https://github.com/seancribbs/neotoma.git", {branch, "master"}}},
              {erlware_commons, ".*", {git, "https://github.com/erlware/erlware_commons.git", {branch, "master"}}},
              {erlydtl, ".*", {git, "https://github.com/erlydtl/erlydtl.git", {tag, "0.9.0"}}},
              {getopt, "", {git, "https://github.com/jcomellas/getopt.git", {branch, "master"}}}
             ],

case IsRebar3 of
    true -> CONFIG;
    false ->
        lists:keyreplace(deps, 1, CONFIG, {deps, Rebar2Deps})
end.
